1. Write a C program to store the  Graph using Adjacency Matrix &
display that.          
3. Write a C program to count number of vertices and edges present in a graph.
4. Write a C program to detect a cycle in a graph.
5. Write a C program to identify number of odd degree vertices and number of
even degree vertices in a graph.
6. Write a C program to check whether a given graph is complete or not.        menu driven user input


#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 10

int adjMatrix[MAX_VERTICES][MAX_VERTICES];
int numVertices = 0;

void initializeGraph() {
    numVertices = 0;
    for (int i = 0; i < MAX_VERTICES; i++) {
        for (int j = 0; j < MAX_VERTICES; j++) {
            adjMatrix[i][j] = 0;
        }
    }
}

void addEdge(int src, int dest) {
    if (src >= 0 && src < MAX_VERTICES && dest >= 0 && dest < MAX_VERTICES) {
        adjMatrix[src][dest] = 1;
        adjMatrix[dest][src] = 1; // Assuming an undirected graph
        if (src > numVertices) numVertices = src;
        if (dest > numVertices) numVertices = dest;
    } else {
        printf("Invalid edge!\n");
    }
}

void displayGraph() {
    printf("Adjacency Matrix Representation of the Graph:\n");
    printf(" ");
    for (int i = 0; i <= numVertices; i++) {
        printf(" %d", i);
    }
    printf("\n");
    for (int i = 0; i <= numVertices; i++) {
        printf("%d ", i);
        for (int j = 0; j <= numVertices; j++) {
            printf("%2d", adjMatrix[i][j]);
        }
        printf("\n");
    }
}

int countVertices() {
    return numVertices + 1;
}

int countEdges() {
    int count = 0;
    for (int i = 0; i <= numVertices; i++) {
        for (int j = 0; j <= numVertices; j++) {
            if (adjMatrix[i][j] == 1) {
                count++;
            }
        }
    }
    return count / 2; // Since the graph is undirected, divide by 2
}

int hasCycleUtil(int v, int visited[], int parent) {
    visited[v] = 1;
    for (int i = 0; i <= numVertices; i++) {
        if (adjMatrix[v][i]) {
            if (!visited[i]) {
                if (hasCycleUtil(i, visited, v)) {
                    return 1;
                }
            } else if (i != parent) {
                return 1;
            }
        }
    }
    return 0;
}

int hasCycle() {
    int visited[MAX_VERTICES] = {0};
    for (int i = 0; i <= numVertices; i++) {
        if (!visited[i]) {
            if (hasCycleUtil(i, visited, -1)) {
                return 1;
            }
        }
    }
    return 0;
}

int countOddDegreeVertices() {
    int degree[MAX_VERTICES] = {0};
    for (int i = 0; i <= numVertices; i++) {
        for (int j = 0; j <= numVertices; j++) {
            if (adjMatrix[i][j]) {
                degree[i]++;
            }
        }
    }
    int oddCount = 0;
    for (int i = 0; i <= numVertices; i++) {
        if (degree[i] % 2 != 0) {
            oddCount++;
        }
    }
    return oddCount;
}

int countEvenDegreeVertices() {
    int degree[MAX_VERTICES] = {0};
    for (int i = 0; i <= numVertices; i++) {
        for (int j = 0; j <= numVertices; j++) {
            if (adjMatrix[i][j]) {
                degree[i]++;
            }
        }
    }
    int evenCount = 0;
    for (int i = 0; i <= numVertices; i++) {
        if (degree[i] % 2 == 0) {
            evenCount++;
        }
    }
    return evenCount;
}

int isCompleteGraph() {
    for (int i = 0; i <= numVertices; i++) {
        for (int j = 0; j <= numVertices; j++) {
            if (i != j && !adjMatrix[i][j]) {
                return 0;
            }
        }
    }
    return 1;
}

int main() {
    int choice, src, dest;
    initializeGraph();
    
    do {
        printf("\n1. Add an edge to the graph\n");
        printf("2. Display the graph\n");
        printf("3. Count number of vertices\n");
        printf("4. Count number of edges\n");
        printf("5. Detect cycle in the graph\n");
        printf("6. Identify number of odd degree vertices\n");
        printf("7. Identify number of even degree vertices\n");
        printf("8. Check whether the graph is complete\n");
        printf("9. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        
        switch(choice) {
            case 1:
                printf("Enter source and destination vertices of the edge: ");
                scanf("%d %d", &src, &dest);
                addEdge(src, dest);
                break;
            case 2:
                displayGraph();
                break;
            case 3:
                printf("Number of vertices in the graph: %d\n", countVertices());
                break;
            case 4:
                printf("Number of edges in the graph: %d\n", countEdges());
                break;
            case 5:
                if (hasCycle()) {
                    printf("Graph has a cycle.\n");
                } else {
                    printf("Graph does not have a cycle.\n");
                }
                break;
            case 6:
                printf("Number of odd degree vertices in the graph: %d\n", countOddDegreeVertices());
                break;
            case 7:
                printf("Number of even degree vertices in the graph: %d\n", countEvenDegreeVertices());
                break;
            case 8:
                if (isCompleteGraph()) {
                    printf("Graph is complete.\n");
                } else {
                    printf("Graph is not complete.\n");
                }
                break;
            case 9:
                printf("Exiting program...\n");
                break;
            default:
                printf("Invalid choice! Please enter a valid option.\n");
        }
    } while(choice != 9);
    
    return 0;
}


=====================================================================================================================================================================================

2. Write a C program to store the f Graph using Adjacency List & display
that. user input


#include <stdio.h>
#include <stdlib.h>

// Structure to represent a node in the adjacency list
struct Node {
    int vertex;
    struct Node* next;
};

// Structure to represent the adjacency list
struct Graph {
    int numVertices;
    struct Node** adjList;
};

// Function to create a new node
struct Node* createNode(int v) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->vertex = v;
    newNode->next = NULL;
    return newNode;
}

// Function to create a graph with 'V' vertices
struct Graph* createGraph(int V) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->numVertices = V;

    // Create an array of adjacency lists. Size of the array will be V
    graph->adjList = (struct Node**)malloc(V * sizeof(struct Node*));

    // Initialize each adjacency list as empty by making each head NULL
    for (int i = 0; i < V; i++) {
        graph->adjList[i] = NULL;
    }

    return graph;
}

// Function to add an edge to an undirected graph
void addEdge(struct Graph* graph, int src, int dest) {
    // Add an edge from src to dest
    struct Node* newNode = createNode(dest);
    newNode->next = graph->adjList[src];
    graph->adjList[src] = newNode;

    // Since the graph is undirected, add an edge from dest to src as well
    newNode = createNode(src);
    newNode->next = graph->adjList[dest];
    graph->adjList[dest] = newNode;
}

// Function to print the adjacency list representation of the graph
void printGraph(struct Graph* graph) {
    for (int v = 0; v < graph->numVertices; v++) {
        struct Node* temp = graph->adjList[v];
        printf("\nAdjacency list of vertex %d\n head ", v);
        while (temp) {
            printf("-> %d", temp->vertex);
            temp = temp->next;
        }
        printf("\n");
    }
}

int main() {
    int numVertices, numEdges, src, dest;
    
    printf("Enter the number of vertices in the graph: ");
    scanf("%d", &numVertices);
    
    struct Graph* graph = createGraph(numVertices);
    
    printf("Enter the number of edges in the graph: ");
    scanf("%d", &numEdges);
    
    for (int i = 0; i < numEdges; i++) {
        printf("Enter edge %d (source destination): ", i + 1);
        scanf("%d %d", &src, &dest);
        addEdge(graph, src, dest);
    }
    
    printf("\nAdjacency List Representation of the Graph:\n");
    printGraph(graph);
    
    return 0;
}


================================================================================
================================================================================



Bfs and DFS using adj Matrix without double pointer and easy

#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 10

// Structure to represent the graph
struct Graph {
    int numVertices;
    int adjMatrix[MAX_VERTICES][MAX_VERTICES];
    int visited[MAX_VERTICES];
};

// Function to create a graph with 'V' vertices
struct Graph* createGraph(int V) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->numVertices = V;

    // Initialize adjacency matrix and visited array
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            graph->adjMatrix[i][j] = 0;
        }
        graph->visited[i] = 0;
    }

    return graph;
}

// Function to add an edge to an undirected graph
void addEdge(struct Graph* graph, int src, int dest) {
    graph->adjMatrix[src][dest] = 1;
    graph->adjMatrix[dest][src] = 1; // Assuming an undirected graph
}

// Function for Depth First Search (DFS) traversal
void dfs(struct Graph* graph, int vertex) {
    printf("Visited %d\n", vertex);
    graph->visited[vertex] = 1;

    for (int i = 0; i < graph->numVertices; i++) {
        if (graph->adjMatrix[vertex][i] && !graph->visited[i]) {
            dfs(graph, i);
        }
    }
}

// Function for Breadth First Search (BFS) traversal
void bfs(struct Graph* graph, int startVertex) {
    int queue[MAX_VERTICES];
    int front = 0, rear = 0;
    queue[rear++] = startVertex;
    graph->visited[startVertex] = 1;

    while (front < rear) {
        int currentVertex = queue[front++];
        printf("Visited %d\n", currentVertex);

        for (int i = 0; i < graph->numVertices; i++) {
            if (graph->adjMatrix[currentVertex][i] && !graph->visited[i]) {
                queue[rear++] = i;
                graph->visited[i] = 1;
            }
        }
    }
}

int main() {
    int choice, vertices, edges, src, dest;

    printf("Enter the number of vertices in the graph: ");
    scanf("%d", &vertices);
    struct Graph* graph = createGraph(vertices);

    printf("Enter the number of edges in the graph: ");
    scanf("%d", &edges);

    for (int i = 0; i < edges; i++) {
        printf("Enter edge %d (source destination): ", i + 1);
        scanf("%d %d", &src, &dest);
        addEdge(graph, src, dest);
    }

    do {
        printf("\nGraph Traversal Menu\n");
        printf("1. Depth First Search (DFS)\n");
        printf("2. Breadth First Search (BFS)\n");
        printf("3. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        // Reset visited array before each traversal
        for (int i = 0; i < vertices; i++) {
            graph->visited[i] = 0;
        }

        switch (choice) {
            case 1:
                for (int i = 0; i < vertices; i++) {
                    if (graph->visited[i] == 0) {
                        dfs(graph, i);
                    }
                }
                break;
            case 2:
                for (int i = 0; i < vertices; i++) {
                    if (graph->visited[i] == 0) {
                        bfs(graph, i);
                    }
                }
                break;
            case 3:
                printf("Exiting program...\n");
                break;
            default:
                printf("Invalid choice! Please enter a valid option.\n");
        }
    } while (choice != 3);

    return 0;
}

